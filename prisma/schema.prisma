// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  // Add additional fields as needed (e.g., name, password, etc.)
  projects   Project[]
  selectedProjectId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Project {
  id                String   @id @default(uuid())
  name              String
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  dbSchema          String   // Stores the SQL for the database schema
  rlsSchema         String   // Stores the RLS policies (SQL)
  additionalContext String?  // Optional additional context if needed
  tests             Test[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum TestRole {
  ANONYMOUS
  AUTHENTICATED
}

model Test {
  id          String    @id @default(uuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  role        TestRole  // Either ANONYMOUS or AUTHENTICATED
  name        String
  description String
  query       String?   // The SQL query or test instructions, if applicable
  expected    Json?     // Expected outcome (using JSON allows flexibility)
  result      Json?     // Optionally store the result of a test run
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
